template<typename T = int, int Base = 1>
                    struct DSU {

                        vector<T> parent, gsize;

                        DSU(int MaxNodes) {
                            parent = gsize = vector<T>(MaxNodes + 5);
                            for (int i = Base; i <= MaxNodes; i++)
                                parent[i] = i, gsize[i] = 1;
                        }

                        T find_leader(int node) {
                            return parent[node] = (parent[node] == node ? node : find_leader(parent[node]));
                        }

                        bool is_same_sets(int u, int v) {
                            return find_leader(u) == find_leader(v);
                        }

                        void union_sets(int u, int v) {
                            int leader_u = find_leader(u), leader_v = find_leader(v);
                            if (leader_u == leader_v) return;
                            if (gsize[leader_u] < gsize[leader_v]) swap(leader_u, leader_v);
                            gsize[leader_u] += gsize[leader_v], parent[leader_v] = leader_u;
                        }

                        int get_size(int u) {
                            return gsize[find_leader(u)];
                        }
                    };
